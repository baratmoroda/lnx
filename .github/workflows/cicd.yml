name: CI CD
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
 
jobs:
  build-and-push:
    name: Build and push docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
 
      - name: Login to docker hub
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
 
      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v3.6.1
 
      - name: Build and push docker image
        uses: docker/build-push-action@v6.7.0
        with:
          context: ./docker
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/administration:latest
  test:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    services:
      postgres:
        image: postgres:alpine
        env:
          POSTGRES_DB: kubsu
          POSTGRES_PASSWORD: kubsu
          POSTGRES_USER: kubsu
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
 
      - name: Run tests in container
        env:
          DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/administration:latest
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          docker run --rm \
            --network host \
            -e DATABASE_URL="$DATABASE_URL" \
            -v "$(pwd):/app" \
            -w /app \
            "$DOCKER_IMAGE" \
            sh -c '
              echo "1. Waiting for PostgreSQL..."
              while ! nc -z localhost 5432; do sleep 1; done
            
              echo "2. Installing test dependencies..."
              pip install -e ".[test]"
            
              echo "3. Running tests..."
              pytest
            
              echo "4. Cleaning up test dependencies..."
              pip freeze | grep -v "^\-e" | xargs pip uninstall -y
            '
 
      - name: Cleanup host system
        run: |
          docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/administration:latest || true
          docker system prune -af
  deploy:
    runs-on: self-hosted
    needs: [ test ]
    steps:
      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd ~/tasks/docker
            ./restart.sh
