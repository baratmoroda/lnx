name: CI CD
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
 
jobs:
  build-and-push:
    name: Build and push docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
 
      - name: Login to docker hub
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
 
      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v3.6.1
 
      - name: Build and push docker image
        uses: docker/build-push-action@v6.7.0
        with:
          context: ./docker
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/administration:latest
 
  test:
    runs-on: ubuntu-latest
    needs: [ build-and-push ]
    services:
      postgres:
        image: postgres:alpine
        env:
          POSTGRES_DB: kubsu
          POSTGRES_PASSWORD: kubsu
          POSTGRES_PORT: 5432
          POSTGRES_USER: kubsu
        ports:
          - 5432:5432
        options:
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
 
      - name: Pull docker image
        run: docker pull ${{ secrets.DOCKERHUB_USERNAME }}/administration:latest
 
      - name: Run tests
        run: |
          docker run --rm \
            --network host \
            -e DATABASE_URL=${{ secrets.DATABASE_URL }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/administration:latest \
            sh -c "while ! nc -z localhost 5432; do sleep 1; done && make test"
      - name: Cleanup
        run: |
          docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/administration:latest \
            && docker system prune -af 
  deploy:
    runs-on: self-hosted
    needs: [ test ]
    steps:
      - name: Set ssh key
        uses: webfactory/ssh-agent@v0.4.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to server
        run: |
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "podman pull ${{ secrets.DOCKERHUB_USERNAME }}/admintask:latest \
             && podman stop main-container || true \
             && podman rm main-container || true \
             && podman run -d \
                --name main-container \
                -p 8095:8000 \
                ${{ secrets.DOCKERHUB_USERNAME }}/administration
