name: CI CD
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
 
jobs:
  build-and-push:
    name: Build and push docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
 
      - name: Login to docker hub
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
 
      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v3.6.1
 
      - name: Build and push docker image
        uses: docker/build-push-action@v6.7.0
        with:
          context: ./docker
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/administration:latest
 
  test:
    runs-on: ubuntu-latest
    needs: [ build-and-push ]
    services:
      postgres:
        image: postgres:alpine
        env:
          POSTGRES_DB: kubsu
          POSTGRES_PASSWORD: kubsu
          POSTGRES_USER: kubsu
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
 
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
 
      - name: Pull docker image
        run: docker pull ${{ secrets.DOCKERHUB_USERNAME }}/administration:latest
 
      - name: Prepare test environment
        run: |
          # Создаем временный файл с переменными окружения
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env.test
          echo "OTHER_SECRET=${{ secrets.OTHER_SECRET }}" >> .env.test
 
      - name: Run tests inside container
        run: |
          docker run --rm \
            --network host \
            --env-file .env.test \
            -v $(pwd):/app \
            -w /app \
            ${{ secrets.DOCKERHUB_USERNAME }}/administration:latest \
            sh -c "while ! nc -z localhost 5432; do sleep 1; done && pip install --prefix=/install .[test] && pytest tests"
 
      - name: Cleanup
        run: |
          rm -f .env.test
          docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/administration:latest
          docker system prune -af
 
  deploy:
    runs-on: self-hosted
    needs: [ test ]
    steps:
      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd ~/tasks/docker
            ./restart.sh
